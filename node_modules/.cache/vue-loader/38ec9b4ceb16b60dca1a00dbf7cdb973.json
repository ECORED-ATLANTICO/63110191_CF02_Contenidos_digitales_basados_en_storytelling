{"remainingRequest":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/src/views/Tema4.vue?vue&type=template&id=2ef11f30&lang=pug","dependencies":[{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/src/views/Tema4.vue","mtime":1758989021607},{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/cache-loader/dist/cjs.js","mtime":1758989058198},{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/cache-loader/dist/cjs.js","mtime":1758989058198},{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/babel-loader/lib/index.js","mtime":1758989058782},{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1758989059233},{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/pug-plain-loader/index.js","mtime":1758989057989},{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/cache-loader/dist/cjs.js","mtime":1758989058198},{"path":"/home/runner/work/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/63110191_CF2_CONTENIDOS_DIGITALES_BASADOS_EN_STORYTELLING/node_modules/vue-loader/lib/index.js","mtime":1758989058891}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}